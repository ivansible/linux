# fERM rules
# ansible-managed
@def $do_ufw = {{ ferm_mimic_ufw |bool |ternary(1,0) }};
@def $do_docker = {{ ferm_docker |bool |ternary(1,0) }};
@def $docker0 = {{ ferm_docker_iface }};
@def $docker_subnet4 = {{ ferm_docker_subnet4 }};

# Chains
domain (ip ip6) {
    table raw {
        chain PREROUTING policy ACCEPT;
        chain OUTPUT policy ACCEPT;
    }
    table mangle {
        chain PREROUTING policy ACCEPT;
        chain INPUT policy ACCEPT;
        chain FORWARD policy ACCEPT;
        chain OUTPUT policy ACCEPT;
        chain POSTROUTING policy ACCEPT;
    }
    table nat {
        chain PREROUTING policy ACCEPT;
        chain INPUT policy ACCEPT;
        chain OUTPUT policy ACCEPT;
        chain POSTROUTING policy ACCEPT;
    }
    table filter {
        chain INPUT policy DROP;
        chain FORWARD policy DROP;
        chain OUTPUT policy ACCEPT;
    }
}

# Docker
@if $do_docker domain ip {
    table nat {
        chain DOCKER;
        chain PREROUTING mod addrtype dst-type LOCAL jump DOCKER;
        chain OUTPUT daddr ! 127.0.0.0/8 mod addrtype dst-type LOCAL jump DOCKER;
        chain POSTROUTING saddr $docker_subnet4 outerface ! $docker0 MASQUERADE;
        chain DOCKER interface $docker0 RETURN;
    }

    table filter {
        chain DOCKER;
        chain DOCKER-ISOLATION-STAGE-1;
        chain DOCKER-ISOLATION-STAGE-2;
        chain DOCKER-USER;

        chain FORWARD {
            jump DOCKER-USER;
            jump DOCKER-ISOLATION-STAGE-1;
            outerface $docker0 {
                mod conntrack ctstate (RELATED ESTABLISHED) ACCEPT;
                jump DOCKER;
            }
            interface $docker0 {
                outerface ! $docker0 ACCEPT;
                outerface $docker0 ACCEPT;
            }
        }

        chain DOCKER-ISOLATION-STAGE-1 {
            interface $docker0 outerface ! $docker0 {
                jump DOCKER-ISOLATION-STAGE-2;
            }
            RETURN;
        }
        chain DOCKER-ISOLATION-STAGE-2 {
            outerface $docker0 DROP;
            RETURN;
        }
        chain DOCKER-USER {
            RETURN;
        }
    }
}

# Pre-Filter 1
@if $do_ufw domain (ip ip6) table filter {
    chain INPUT interface lo ACCEPT;
    chain OUTPUT outerface lo ACCEPT;
    chain (INPUT FORWARD OUTPUT) {
        @if @eq($DOMAIN,ip6) mod rt rt-type 0 DROP;
        mod conntrack ctstate (RELATED ESTABLISHED) ACCEPT;
    }
    chain INPUT mod conntrack ctstate INVALID DROP;
}

# ICMP
domain ip table filter {
    chain (INPUT FORWARD) proto icmp icmp-type (3 11 12 8) ACCEPT;
}
domain ip6 table filter {
    chain (OUTPUT) proto icmp ACCEPT;
    chain (FORWARD) proto icmp icmp-type (1 2 3 4 128 129) ACCEPT;
    chain (INPUT) proto icmp {
        icmp-type (1 2 3 4 128 129 144 145 146 147) ACCEPT;
        icmp-type (133 134 135 136 141 142) mod hl hl-eq 255 ACCEPT;
        icmp-type (148 149) mod hl hl-eq 255 ACCEPT;
        icmp-type (130 131 132 143) saddr fe80::/10  ACCEPT;
        icmp-type (151 152 153) mod hl hl-eq 1 saddr fe80::/10 ACCEPT;
    }
}

# Pre-Filter 2
@if $do_ufw domain ip table filter {
    chain nonlocal {
        mod addrtype dst-type (LOCAL MULTICAST) RETURN;
        mod addrtype dst-type (BROADCAST) RETURN;
        DROP;
    }
    chain INPUT {
        proto udp sport 67 dport 68 ACCEPT;
        jump nonlocal;
        daddr 224.0.0.251/32 protocol udp dport 5353 ACCEPT;
        daddr 239.255.255.250/32 protocol udp dport 1900 ACCEPT;
    }
}
@if $do_ufw domain ip6 table filter chain INPUT {
    proto udp saddr fe80::/10 daddr fe80::/10 sport 547 dport 546 ACCEPT;
    proto udp daddr ff02::fb/128 dport 5353 ACCEPT;
    proto udp daddr ff02::f/128 dport 1900 ACCEPT;
}

# User Filter
domain (ip ip6) table filter chain INPUT {
    # @include(user-input);
    proto (tcp udp) dport (443) ACCEPT;
    proto tcp dport (22 80) ACCEPT;
    proto udp dport (123) ACCEPT;
}
domain (ip ip6) table filter chain FORWARD {
    # @include(user-forward);
}

# Post-Filter
@if $do_ufw domain (ip ip6) table filter {
    chain INPUT {
        proto udp dport (137 138) DROP;
        proto tcp dport (139 445) DROP;
        @if @eq($DOMAIN,ip) proto udp dport (67 68) DROP;
        @if @eq($DOMAIN,ip6) proto udp dport (546 547) DROP;
        @if @eq($DOMAIN,ip) mod addrtype dst-type BROADCAST DROP;
    }
    chain OUTPUT {
        proto (tcp udp) mod conntrack ctstate (NEW) ACCEPT;
    }
}
