# fERM rules
# ansible-managed

@def $do_ufw = {{ ferm_mimic_ufw |bool |ternary(1,0) }};
@def $do_docker = {{ ferm_docker |bool |ternary(1,0) }};
@def $docker0 = {{ ferm_docker_iface }};
@def $docker_subnet4 = {{ ferm_docker_subnet4 }};

# WARNING: errors in ferm-ipset will be ignored!!
@hook pre "{{ ferm_ipset_binary }} -c {{ ferm_dir }}";

@include 'parts/chains.ferm';

# Pre Rules

@if $do_docker { @include 'parts/docker.ferm'; }

@if $do_ufw { @include 'parts/ufw-pre1.ferm'; }

@include @glob('before/*.ferm');

# Block Hosts/Ports

domain (ip ip6) table filter {
    chain int_hosts;

    chain ext_hosts {
        # goto outta here if host is internal
        @if @eq($DOMAIN,ip) mod set set ferm_hosts_int_ip4 src goto int_hosts;
        @if @eq($DOMAIN,ip6) mod set set ferm_hosts_int_ip6 src goto int_hosts;

        # rules for external hosts below
        proto (tcp udp) mod set set ferm_ports_block_ip dst DROP;
        proto tcp mod set set ferm_ports_block_tcp dst DROP;
        proto udp mod set set ferm_ports_block_udp dst DROP;
    }

    chain (INPUT FORWARD) proto (tcp udp) {
        @if @eq($DOMAIN,ip) mod set set ferm_hosts_block_ip4 src DROP;
        @if @eq($DOMAIN,ip6) mod set set ferm_hosts_block_ip6 src DROP;
        jump ext_hosts;
    }
}

@if $do_ufw { @include 'parts/ufw-pre2.ferm'; }

# User Filters

domain (ip ip6) table filter chain INPUT {
    @include @glob('input/*.ferm');

    proto (tcp udp) mod set set ferm_ports_ext_ip dst ACCEPT;
    proto tcp mod set set ferm_ports_ext_tcp dst ACCEPT;
    proto udp mod set set ferm_ports_ext_udp dst ACCEPT;
}

domain (ip ip6) table filter chain int_hosts {
    proto (tcp udp) mod set set ferm_ports_int_ip dst ACCEPT;
    proto tcp mod set set ferm_ports_int_tcp dst ACCEPT;
    proto udp mod set set ferm_ports_int_udp dst ACCEPT;
}

domain (ip ip6) table filter chain FORWARD {
    @include @glob('forward/*.ferm');
}

# Post Rules

@include 'parts/icmp.ferm';

@include @glob('after/*.ferm');

@if $do_ufw @include 'parts/ufw-post.ferm';
