# fERM rules
# ansible-managed

@def $do_ufw = {{ ferm_mimic_ufw |bool |ternary(1,0) }};
@def $do_docker = {{ ferm_docker |bool |ternary(1,0) }};
@def $docker0 = {{ ferm_docker_iface }};
@def $docker_subnet4 = {{ ferm_docker_subnet4 }};

# WARNING: errors in ferm-ipset will be ignored!!
@hook pre "{{ ferm_ipset_binary }} -c {{ ferm_dir }}";

# Create Chains

domain (ip ip6) {
    table raw {
        chain PREROUTING policy ACCEPT;
        chain OUTPUT policy ACCEPT;
    }
    table mangle {
        chain PREROUTING policy ACCEPT;
        chain INPUT policy ACCEPT;
        chain FORWARD policy ACCEPT;
        chain OUTPUT policy ACCEPT;
        chain POSTROUTING policy ACCEPT;
    }
    table nat {
        chain PREROUTING policy ACCEPT;
        chain INPUT policy ACCEPT;
        chain OUTPUT policy ACCEPT;
        chain POSTROUTING policy ACCEPT;
    }
    table filter {
        chain INPUT policy DROP;
        chain FORWARD policy DROP;
        chain OUTPUT policy ACCEPT;
    }
}

# Pre Rules

@include @glob('before/*.ferm');

# User Filters

domain (ip ip6) table filter chain INPUT {
    @include @glob('input/*.ferm');

    proto (tcp udp) mod set set ferm_ports_ext_ip dst ACCEPT;
    proto tcp mod set set ferm_ports_ext_tcp dst ACCEPT;
    proto udp mod set set ferm_ports_ext_udp dst ACCEPT;
}

domain (ip ip6) table filter chain int_hosts {
    proto (tcp udp) mod set set ferm_ports_int_ip dst ACCEPT;
    proto tcp mod set set ferm_ports_int_tcp dst ACCEPT;
    proto udp mod set set ferm_ports_int_udp dst ACCEPT;
}

domain (ip ip6) table filter chain FORWARD {
    @include @glob('forward/*.ferm');
}

# Post Rules

@include @glob('after/*.ferm');
