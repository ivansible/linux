# Ferm rules
# ansible-managed

{% if ferm_ipv4 |bool and ferm_ipv6 |bool %}
@def $ip_all = (ip ip6);
{% elif ferm_ipv4 |bool or ferm_ipv6 |bool %}
@def $ip_all = {{ ferm_ipv4 |bool |ternary('ip','ip6') }};
{% else %}
@def $ip_all = ();
{% endif %}
@def $do_ipv4 = {{ ferm_ipv4 |bool |ternary(1,0) }};
@def $do_ipv6 = {{ ferm_ipv6 |bool |ternary(1,0) }};
@def $do_ufw = {{ ferm_mimic_ufw |bool |ternary(1,0) }};

@def $docker_bridges = (docker0 docker_gwbridge);
@def $docker_user_chain = {{ ferm_docker_user_chain |bool |ternary(1,0) }};
@def $docker_ingress_jail = {{ ferm_docker_ingress_jail |bool |ternary(1,0) }};
@def $docker_ingress_subnet4 = {{ ferm_docker_ingress_subnet4 |default(0,true) }};
@def $docker_ingress_subnet6 = {{ ferm_docker_ingress_subnet6 |default(0,true) }};
@def $docker_subnet4 = {{ ferm_docker_subnet4 }};
@def $public_interface = {{ ferm_public_interface }};

# aliases for hooked chains
@def $PREROUTING = _PREROUTING;
@def $POSTROUTING = _POSTROUTING;
@def $INPUT = _INPUT;
@def $OUTPUT = _OUTPUT;
@def $FORWARD = _FORWARD;

@def $openvz = `echo ${FERM_VZ}`;
@def $reset = `echo ${FERM_RESET}`;

@def &CHAIN_HOOK($chain, $policy) = {
    @def $hook = @cat('_', $chain);
    @if $reset {
        # create standard chain and embed the hook
        chain $chain policy $policy;
        chain $hook;
        chain $chain jump $hook;
    } @else {
        # build hooked chain, preserve original chain
        chain $chain @preserve;
        chain $hook;
    }
}

# Setup chains

@if $do_ipv4 domain ip {
    # hook for oracle cloud
    table filter chain InstanceServices @preserve;

    table raw {
        &CHAIN_HOOK(PREROUTING, ACCEPT);
        &CHAIN_HOOK(OUTPUT, ACCEPT);
    }
    table mangle {
        &CHAIN_HOOK(PREROUTING, ACCEPT);
        &CHAIN_HOOK(INPUT, ACCEPT);
        &CHAIN_HOOK(FORWARD, ACCEPT);
        &CHAIN_HOOK(OUTPUT, ACCEPT);
        &CHAIN_HOOK(POSTROUTING, ACCEPT);
    }
    table nat {
        &CHAIN_HOOK(PREROUTING, ACCEPT);
        @if @not($openvz) &CHAIN_HOOK(INPUT, ACCEPT);
        &CHAIN_HOOK(OUTPUT, ACCEPT);
        &CHAIN_HOOK(POSTROUTING, ACCEPT);
    }
    table filter {
        &CHAIN_HOOK(INPUT, DROP);
        &CHAIN_HOOK(FORWARD, DROP);
        &CHAIN_HOOK(OUTPUT, ACCEPT);
    }
}

@if $do_ipv6 domain ip6 {
    @if @not($openvz) table raw {
        &CHAIN_HOOK(PREROUTING, ACCEPT);
        &CHAIN_HOOK(OUTPUT, ACCEPT);
    }
    table mangle {
        &CHAIN_HOOK(PREROUTING, ACCEPT);
        &CHAIN_HOOK(INPUT, ACCEPT);
        &CHAIN_HOOK(FORWARD, ACCEPT);
        &CHAIN_HOOK(OUTPUT, ACCEPT);
        &CHAIN_HOOK(POSTROUTING, ACCEPT);
    }
    @if @not($openvz) table nat {
        &CHAIN_HOOK(PREROUTING, ACCEPT);
        &CHAIN_HOOK(INPUT, ACCEPT);
        &CHAIN_HOOK(OUTPUT, ACCEPT);
        &CHAIN_HOOK(POSTROUTING, ACCEPT);
    }
    table filter {
        &CHAIN_HOOK(INPUT, DROP);
        &CHAIN_HOOK(FORWARD, DROP);
        &CHAIN_HOOK(OUTPUT, ACCEPT);
    }
}

@if $openvz
@include 'echo "${FERM_VZ_DEFS}" |';

@include @glob('custom.d/*.ferm');

# enforce strict input/forward policy
domain $ip_all table filter {
    chain $FORWARD interface $docker_bridges RETURN;
    chain $FORWARD outerface $docker_bridges RETURN;
    chain ($INPUT $FORWARD) DROP;
}

# end
