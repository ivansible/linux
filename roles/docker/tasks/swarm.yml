---
- name: open internal ports in ferm for docker swarm
  ivansible.base.ferm_port:
    port: "{{ docker_swarm_ports }}"
    comment: docker swarm
    zone: internal
  when: lin_firewall == 'ferm'
  tags: [skip_ansible_lint, lin_docker_firewall]

- name: permit ipsec/esp in ferm for swarm
  ivansible.base.ferm_rule:
    name: docker-swarm
    prio: 33
    rule: |
      # Allow encrypted overlays (ipsec esp)
      domain $ip_all table filter {
        chain $INPUT  proto esp  jump FERM-HOSTS-EXTERNAL;
        chain FERM-HOSTS-INTERNAL  proto esp  ACCEPT;
      }
  when: lin_firewall == 'ferm'
  tags: [skip_ansible_lint, lin_docker_firewall]


- name: set docker swarm facts
  ansible.builtin.set_fact:
    _swarm_role: "{{ docker_swarm_role |d('none',true) |replace('-','_') }}"
    _swarm_addr: "{{ docker_swarm_manager_ip }}:{{ docker_swarm_manager_port }}"

- name: verify swarm role
  ansible.builtin.assert:
    that: _swarm_role in ['worker', 'manager_worker', 'manager_master', 'manager_only', 'reserve', 'none']

- name: group hosts by swarm_role
  ansible.builtin.group_by:
    key: "_swarm_{{ _swarm_role }}"
  ## ansible 2.9.11 reports this step as changed breaking idempotence
  ## issue: https://github.com/ansible/ansible/issues/70844
  ## fix:   https://github.com/ansible/ansible/pull/70919
  ## patch: https://gist.githubusercontent.com/ivandeex/dfb69718baad3e2ac3feec6dd3296045/raw/a49b1bd449b488731066685707761f6b6a7af62c/fix-ansible-group_by.patch
  changed_when: false


- name: derive swarm master hostname
  ansible.builtin.set_fact:
    _swarm_master: "{{ groups._swarm_manager_master |d(['none'],true) |first }}"

- name: setup swarm master
  community.docker.docker_swarm:
    state: present
    advertise_addr: "{{ _swarm_addr }}"
    default_addr_pool: "{{ docker_swarm_overlay_pool4 }}"
  register: _swarm_init
  when: _swarm_role == 'manager_master'

- name: query ingress network parameters
  community.docker.docker_network_info:
    name: ingress
  register: _ingress_info
  when:
    - _swarm_role == 'manager_master'
    - docker_swarm_ingress_subnet4 is not none
      or docker_swarm_ingress_encrypt is not none

- name: configure ingress network
  ## Warning: if there are connected services, this step will fail.
  ## Force by: docker_swarm_reset=true
  ## Note: run shell commands since docker_network module fails to change ingress
  ansible.builtin.shell:
    cmd:
      yes| docker network remove ingress >/dev/null &&
      sleep 2 &&
      docker network create {{ arg_ingress }} {{ arg_subnet4 }}{{ arg_encrypt }} ingress
  when:
    - _ingress_info is not skipped
    - old_subnet4 != new_subnet4 or old_encrypt != new_encrypt
  vars:
    old_encrypt: "{{ _ingress_info.network.Options.encrypted |d(none) is not none }}"
    old_subnet4: "{{ _ingress_info.network.IPAM.Config.0.Subnet |d(none) }}"
    new_encrypt: "{{ old_encrypt if (docker_swarm_ingress_encrypt is none) else
                     docker_swarm_ingress_encrypt |bool }}"
    new_subnet4: "{{ docker_swarm_ingress_subnet4 |d(old_subnet4, true) }}"
    arg_ingress: "--driver overlay --ingress"
    arg_subnet4: "--subnet {{ new_subnet4 }} --gateway {{ new_subnet4 |ipaddr('next_usable') }}"
    arg_encrypt: "{{ new_encrypt |ternary(' --opt encrypted','') }}"


- name: join nodes into swarm
  community.docker.docker_swarm:
    state: join
    advertise_addr: "{{ _swarm_addr }}"
    remote_addrs: ["{{ master_vars._swarm_addr }}"]
    join_token: "{{ join_token }}"
  vars:
    master_vars: "{{ hostvars[_swarm_master] }}"
    tokens: "{{ master_vars._swarm_init.swarm_facts.JoinTokens }}"
    join_token: "{{ tokens.Worker if _swarm_role in ['worker','reserve'] else tokens.Manager }}"
  when:
    - _swarm_role in ['worker','manager_worker','manager_only','reserve']
    - _swarm_master != 'none'

- name: configure swarm nodes
  community.docker.docker_node:
    hostname: "{{ inventory_hostname }}"
    role: "{{ 'worker' if _swarm_role in ['worker','reserve'] else 'manager' }}"
    availability: "{{ 'drain' if _swarm_role in ['manager_only','reserve'] else 'active' }}"
    labels:
      hostname: "{{ inventory_hostname }}"
      memsize: "{{ 'normal' if ansible_memtotal_mb > docker_swarm_ram_threshold_mb else 'small' }}"
  delegate_to: "{{ _swarm_master }}"
  ## retry until swarm status propagates
  retries: 9
  until: _docker_configure_swarm_node_result is not failed
  register: _docker_configure_swarm_node_result
  when:
    - _swarm_role != 'none'
    - _swarm_master != 'none'
...
