---
- name: install wireguard from universe
  ansible.builtin.apt:
    name: wireguard
  tags: lin_wg_install

- name: install wireguard config helper
  ansible.builtin.copy:
    src: wg-setmetric.sh
    dest: /usr/local/sbin/wg-setmetric
    owner: root
    group: root
    mode: 0755
  tags: lin_wg_install

- name: create wireguard config directory
  ansible.builtin.file:
    path: /etc/wireguard
    state: directory
    mode: 0755
  tags: lin_wg_install

- name: install wireguard-go on old kernels
  block:
    - name: check that wireguard-go binary exists
      ansible.builtin.stat:
        path: "{{ lin_wg_go_binary }}"
      register: wireguard_go_binary_stat

    - name: build wireguard-go
      ansible.builtin.include_tasks: go.yml
      args:
        apply:
          become: true
          tags:
            - lin_wg_go
            - lin_wg_all
      when: lin_wg_go_upgrade |bool
            or not wireguard_go_binary_stat.stat.exists
  when: lin_wg_install_go |bool
  tags: lin_wg_go

- name: configure wireguard
  ansible.builtin.template:
    src: wireguard.conf
    dest: /etc/wireguard/{{ iface }}.conf
    mode: 0600
  vars:
    iface: "wg{{ idx }}"
    mtu: "{{ net.mtu |d(0) |int }}"
    addr: "{{ net.addr }}"
    port: "{{ net.port |d(0) |int }}"
    key: "{{ net.key }}"
    metric: "{{ net.metric |d(none) }}"
    peers: "{{ net.peers |d([],true) |flatten }}"
    keepalive: "{{ net.keepalive |d(0) |int }}"
  loop: "{{ lin_wg_nets |d([],true) |flatten }}"
  loop_control:
    loop_var: net
    index_var: idx
    label: "{{ net.name |d(iface) }}"
  register: wg_conf_result
  notify: restart wireguard service
  tags: lin_wg_config


- name: open wireguard port in ufw
  community.general.ufw:
    port: "{{ item.port |d(0) |string }}"
    proto: udp
  no_log: "{{ hide_secrets |bool }}"
  loop: "{{ lin_wg_nets }}"
  loop_control:
    index_var: idx
    label: "{{ item.name |d('wg%d' % idx) }}"
  when:
    - lin_firewall == 'ufw'
    - item.port |d(0) |int
  tags: lin_wg_firewall

- name: configure ferm firewall for wireguard
  ansible.builtin.import_tasks: ferm.yml
  when: lin_firewall == 'ferm'
  tags:
    - skip_ansible_lint
    - lin_wg_firewall

- name: make directory for wireguard service drop-in
  ansible.builtin.file:
    path: "/etc/systemd/system/wg-quick@wg{{ item }}.service.d"
    state: directory
    mode: 0755
  loop: "{{ range(1, lin_wg_nets |count) |list }}"
  loop_control:
    label: "wg{{ item }}"
  tags: lin_wg_service

- name: enforce ordering on start of wireguard devices
  ansible.builtin.copy:
    dest: "/etc/systemd/system/wg-quick@wg{{ item }}.service.d/order.conf"
    force: true
    mode: 0644
    content: |
      # enforce wireguard start order (ansible-managed)
      # 1sec delay allows route priorities kick in
      # so that interfaces can have client with equal ip
      [Unit]
      {% for prev in range(item) %}
      After=wg-quick@wg{{ prev }}.service
      {% endfor %}
      [Service]
      ExecStartPre=/bin/sleep 1
  loop: "{{ range(1, lin_wg_nets |count) |list }}"
  loop_control:
    label: "wg{{ item }}"
  register: wg_order_result
  notify: restart wireguard service
  tags: lin_wg_service

- name: enable wireguard service
  ansible.builtin.systemd:
    name: "wg-quick@wg{{ item }}"
    state: started
    enabled: true
    daemon_reload: "{{ conf_changed or order_changed }}"
  loop: "{{ range(lin_wg_nets |count) |list }}"
  loop_control:
    label: "wg{{ item }}"
  vars:
    conf_changed: "{{ wg_conf_result |d({}) is changed }}"
    order_changed: "{{ wg_order_result |d({}) is changed }}"
  register: enable_service_result
  until: enable_service_result is successful
  retries: 2  # workaround for pluto
  tags: lin_wg_service


- name: create directory for wireguard client configs
  ansible.builtin.file:
    path: /etc/wireguard/clients
    state: directory
    mode: 0750
  when: lin_wg_nets |d([],true) |json_query('[].peers[]|[?client_config]') |length >0
  tags: lin_wg_clients

- name: create wireguard client config files
  ansible.builtin.template:
    src: client.conf
    dest: /etc/wireguard/clients/{{ filename }}.conf
    mode: 0600
  when:
    - net.name |d('')
    - peer.name |d('')
    - active |bool
    - client_config |bool
  loop: "{{ clients }}"
  loop_control:
    label: "{{ label }}"
  vars:
    networks: "{{ lin_wg_nets |d([],true) |flatten }}"
    clients: "{{ networks |subelements('peers', skip_missing=true) }}"

    net: "{{ item.0 }}"
    peer: "{{ item.1 }}"

    label: "{{ peer.name |d('peer') }}{{ _sep }}{{ peer.via |d(server_name) }}/{{ net.name |d('net') }}"
    _sep: "{{ '@' if peer.via |d('') else '>' }}"
    filename: "{{ label |regex_replace('[@>/]','-') }}"

    server_name: "{{ peer.via |d(inventory_hostname) }}"
    server_host: "{{ peer.host |d(net_host4, true) |d(lin_wg_host) |d('',true) }}"
    server_port: "{{ peer.port |d(net.port) |d(0,true) |int }}"

    active: "{{ peer.active |d(true) |bool }}"
    client_config: "{{ peer.client_config |d(false) |bool }}"

    addr: "{{ peer.client_ips |d(peer.ips) |d([],true) }}"
    ips: "{{ peer.server_ips |d(net.addr) |d([],true) }}"
    mtu: "{{ peer.mtu |d(net.mtu, true) |d(0) |int }}"
    keepalive: "{{ peer.keepalive |d(0) |int }}"

    _redirect_val: "{{ peer.redirect_gateway |d(false,true) |string |lower }}"
    redirect_ipv4: "{{ _redirect_val in 'ipv4 true yes on 1' }}"
    redirect_ipv6: "{{ _redirect_val in 'ipv6 true yes on 1' }}"
    public_iface: "{{ lin_wg_public_interface |d('') }}"
    has_metric: "{{ peer.metric |d('') and peer.device |d('') }}"
  tags: lin_wg_clients
...
