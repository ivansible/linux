---
- name: create dedicated restic user
  ansible.builtin.user:
    name: restic
    groups: [rclone]
    append: true
    shell: /bin/bash
    ## no password, login with ssh keys only
    password: '!'
  register: restic_user_result

- name: authorize public keys
  ## this task requires molecule/default/files
  ansible.posix.authorized_key:
    user: restic
    key: "{{ lookup('pipe', keygen_cmd) }}"
    comment: "{{ item |basename |regex_replace('[.]key$') }}"
  vars:
    ## use '&&' in the pipe to fail on chmod errors
    keygen_cmd: 'chmod 600 "{{ item }}" && ssh-keygen -y -f "{{ item }}"'
  when:
    - not ansible_check_mode
    - item |d('')
  loop: "{{ lin_restic_authorized_keys }}"
  loop_control:
    label: "{{ item |basename }}"

- name: restic environment variables for interactive use
  ansible.builtin.blockinfile:
    path: "{{ item.home }}/.bashrc"
    block: |
      export RESTIC_REPOSITORY={{ lin_restic_repository }}
      export RESTIC_PASSWORD={{ lin_restic_password }}
      export RCLONE_CONFIG={{ lin_rclone_config }}
    marker: '# RESTIC {mark}'
    insertbefore: interactively
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: 0600
    create: true
  when:
    - not ansible_check_mode
    - item.enable |bool
  loop:
    - user: restic
      group: rclone
      home: "{{ restic_user_result.home }}"
      enable: "{{ lin_restic_environ_for_restic }}"
    - user: root
      group: root
      home: /root
      enable: "{{ lin_restic_environ_for_root }}"
  no_log: "{{ hide_secrets |bool }}"

- name: allow user restic to impersonate for backup jobs
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/99-restic
    line: "restic ALL=({{ usr }}) NOPASSWD: {{ cmd }}"
    owner: root
    mode: 0440
    create: true
  loop: "{{ lin_restic_sudo_rules |d([],true) |flatten }}"
  loop_control:
    label: "{{ cmd |basename }}"
  vars:
    usr: "{{ item.user |d('root') }}"
    cmd: "{{ item.command |d(item |string) }}"


- name: create directories for restic jobs
  ansible.builtin.file:
    state: directory
    path: "{{ item.dir }}"
    owner: "{{ item.owner |d('root') }}"
    group: "{{ item.group |d('rclone') }}"
    mode: "{{ item.mode |d('0750') }}"
  loop: "{{ lin_restic_job_dirs |d([],true) |flatten }}"
  loop_control:
    label: "{{ item.dir }}"


- name: create directories for restic ssh entries
  ansible.builtin.file:
    state: directory
    path: "{{ home }}/.ssh"
    owner: "{{ owner }}"
    mode: 0700
  loop: "{{ lin_restic_ssh_configs |d([],true) |flatten }}"
  loop_control:
    label: "{{ home }}/.ssh"
  vars:
    owner: "{{ item.owner |d('restic') }}"
    home: "{{ '/root' if owner == 'root'
              else restic_user_result.home if owner == 'restic'
              else '/home/%s' % owner }}"
    ## " dummy quote to fix vim highlighter

- name: create ssh entries for restic jobs
  ansible.builtin.blockinfile:
    path: "{{ home }}/.ssh/config"
    owner: "{{ owner }}"
    mode: 0600
    block: |
      Host {{ alias }}
        Hostname {{ item.host }}
        Port {{ item.port |d(22) }}
        User {{ item.user |d(owner) }}
      {% if filename %}
        IdentityFile ~/.ssh/{{ filename }}
        StrictHostKeyChecking no
      {% endif %}
    marker: "# RESTIC {mark} {{ item.section |d(alias) }}"
    create: true
  loop: "{{ lin_restic_ssh_configs |d([],true) |flatten }}"
  loop_control:
    label: "{{ owner }} / {{ alias }}"
  vars:
    owner: "{{ item.owner |d('restic') }}"
    home: "{{ '/root' if owner == 'root'
              else restic_user_result.home if owner == 'restic'
              else '/home/%s' % owner }}"
    alias: "{{ item.alias |d(item.host) }}"
    keyfile: "{{ item.keyfile |d('',true) }}"
    filename: "{{ keyfile |basename }}"

- name: install ssh keys for restic jobs
  ansible.builtin.copy:
    src: "{{ keyfile }}"
    dest: "{{ home }}/.ssh/{{ filename }}"
    owner: "{{ owner }}"
    mode: 0600
    force: false
  loop: "{{ lin_restic_ssh_configs |d([],true) |flatten }}"
  when: keyfile |d('')
  loop_control:
    label: "{{ owner }} / {{ filename }}"
  vars:
    owner: "{{ item.owner |d('restic') }}"
    home: "{{ '/root' if owner == 'root'
              else restic_user_result.home if owner == 'restic'
              else '/home/%s' % owner }}"
    keyfile: "{{ item.keyfile |d('',true) }}"
    filename: "{{ keyfile |basename }}"
...
