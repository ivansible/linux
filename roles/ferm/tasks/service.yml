---
- name: setup ferm service
  ansible.builtin.template:
    src: etc/ferm.service
    dest: /etc/systemd/system/ferm.service
    mode: 0644
  vars:
    ferm_run: "{{ ferm_bindir }}/ferm-run"
  register: ferm_service_result
  notify: reload ferm service

- name: reload ferm service config in systemd
  ansible.builtin.command: systemctl daemon-reload  # noqa 303
  when: ferm_service_result is changed

- name: check ufw status (please ignore possible failure)
  ansible.builtin.command: ufw status
  ignore_errors: true
  no_log: "{{ hide_secrets |bool }}"
  changed_when: false
  register: _ufw_status

- name: disable ufw if it's active yet
  community.general.ufw:
    state: disabled
  ignore_errors: true
  ## trigger immediate ferm restart after invoking `ufw disable` and run it
  ## only if really required because it resets chains policy to ACCEPT!
  when: _ufw_status.stdout |d('') is search('Status[:] active')
  register: _ufw_disable

- name: disable ip(6)tables on oracle cloud, if active
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
  loop: [iptables, ip6tables]
  failed_when: false

- name: activate ferm (restart if ufw was active or old dirs were found)
  ansible.builtin.systemd:
    name: ferm
    state: "{{ 'restarted' if need_restart else 'started' }}"
    enabled: true
  vars:
    ufw_was_active: "{{ _ufw_disable is not skipped }}"
    old_dirs_found: "{{ _ferm_remove_old_dirs is changed }}"
    need_restart: "{{ ufw_was_active or old_dirs_found }}"
...
