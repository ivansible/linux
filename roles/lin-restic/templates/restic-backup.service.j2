# ansible-managed
{% set verb_opts = ['--verbose=%s' |format(lin_restic_cron_verbose)]
                   if lin_restic_cron_verbose |int > 0 else [] %}
[Unit]
Description=Restic backup
[Service]
Type=oneshot
User=restic
Group=rclone
EnvironmentFile=/etc/default/restic
ExecStart={{ lin_restic_binary }} version
{% for job in lin_restic_jobs %}
{% set pg_tag = 'pg_' + job.database if job.database is defined else '' %}
{% set auto_tags = [job.name, job.type, inventory_hostname, pg_tag] %}
{% set augment_tags = auto_tags + job.tags |default([]) %}
{% set tag_opts = augment_tags |select |map('regex_replace', '^', '--tag=') |list %}
{% set exclude_opts = job.excludes |default([]) |select |map('regex_replace', '^', '-e ') |list %}
{% set other_opts = job.options |default([]) %}
{% set all_opts = verb_opts + tag_opts + exclude_opts + other_opts %}
{% set all_opts_str = all_opts |select |sort |unique |join(' ') %}
{% set restic_cmd = '%s backup %s' |format(lin_restic_binary, all_opts_str) %}
{% set restic_short = restic_cmd |regex_replace('^/usr/bin/') %}
{% set pg_run = 'set -o pipefail; sudo -u postgres ' %}
{% set pg_port = '-p %s' |format(lin_restic_postgres_port) %}
{% set pg_stdin = '--stdin --stdin-filename=/pg_%s.sql' |format(job.database |default('')) %}
{% if job.type == 'filesystem' %}
ExecStart=-{{ restic_cmd }} {{ job.path }}
{% elif job.type == 'postgres' and job.database == 'all' %}
ExecStart=-/bin/bash -c '{{ pg_run }}pg_dumpall {{ pg_port }} | {{ restic_short }} {{ pg_stdin }}'
{% elif job.type == 'postgres' and job.database != 'all' %}
ExecStart=-/bin/bash -c '{{ pg_run }}pg_dump {{ pg_port }} {{ job.database }} | {{ restic_short }} {{ pg_stdin }}'
{% endif %}
{% endfor %}
ExecStart=/bin/echo backup done
