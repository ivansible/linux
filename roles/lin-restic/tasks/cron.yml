---
- name: restic environment variables for cron
  blockinfile:
    path: /etc/default/restic
    block: "{{ lookup('template', 'defaults.j2') }}"
    marker: '# RESTIC {mark}'
    owner: root
    group: rclone
    mode: 0640
    create: true
  vars:
    proxy: "{{ lin_restic_proxy |d('',true) }}"
    cmd_vars: "{{ lin_restic_cmd_vars |dictsort }}"
  no_log: "{{ hide_secrets |bool }}"


- name: validate restic backup jobs
  assert:
    that:
      - item.name is defined
      - item.type in ['filesystem', 'postgres', 'command']
    quiet: true
  loop: "{{ lin_restic_jobs |d([],true) }}"

- name: generate restic backup script
  template:
    src: restic-backup.sh.j2
    dest: /etc/systemd/system/restic-backup.sh
    owner: restic
    group: rclone
    mode: 0750
  register: restic_backup_script_result
  vars:
    verb_opts: "{{ ['--verbose=%s' |format(lin_restic_cron_verbose)]
                   if lin_restic_cron_verbose |int > 0 else [] }}"
  notify: reload systemd daemon

- name: setup restic backup service
  template:
    src: restic-backup.service.j2
    dest: /etc/systemd/system/restic-backup.service
    mode: 0644
  register: restic_backup_service_result
  notify: reload systemd daemon

- name: configure restic backup timer
  template:
    src: restic-backup.timer.j2
    dest: /etc/systemd/system/restic-backup.timer
    mode: 0644
  register: restic_backup_timer_result
  notify: reload systemd daemon

- name: activate restic daily backup job
  systemd:
    name: restic-backup.timer
    state: started
    enabled: true
    daemon_reload: "{{ script_changed or service_changed or timer_changed }}"
  vars:
    script_changed: "{{ restic_backup_script_result is changed }}"
    service_changed: "{{ restic_backup_service_result is changed }}"
    timer_changed: "{{ restic_backup_timer_result is changed }}"


- name: generate restic weekly prune script
  template:
    src: restic-prune.sh.j2
    dest: /etc/systemd/system/restic-prune.sh
    owner: restic
    group: rclone
    mode: 0750
  vars:
    verb_opts: "{{ ('--verbose=%s ' % lin_restic_cron_verbose)
                   if (lin_restic_cron_verbose |int > 0) else '' }}"
    forget_opts: >-
      --keep-last={{ lin_restic_forget_keep_last }}
      --keep-daily={{ lin_restic_forget_keep_daily }}
      --keep-weekly={{ lin_restic_forget_keep_weekly }}
      --keep-monthly={{ lin_restic_forget_keep_monthly }}
      --keep-yearly={{ lin_restic_forget_keep_yearly }}
    hide_stream_reset_clause: "{{ lin_restic_hide_stream_reset |bool |ternary(_hide_stream_reset_clause, '') }}"
    _hide_stream_reset_clause: " 2>&1 | grep -v 'finish writing GET request'"
  register: restic_prune_script_result
  notify: reload systemd daemon

- name: setup restic weekly prune service
  template:
    src: restic-prune.service.j2
    dest: /etc/systemd/system/restic-prune.service
    mode: 0644
  register: restic_prune_service_result
  notify: reload systemd daemon

- name: configure restic weekly prune timer
  template:
    src: restic-prune.timer.j2
    dest: /etc/systemd/system/restic-prune.timer
    mode: 0644
  register: restic_prune_timer_result
  notify: reload systemd daemon
  vars:
    day: "{{ lin_restic_cron_day_prune |default('Mon', true) }}"
    time: "{{ lin_restic_cron_time_prune |default('7:30', true) }}"

- name: (de)activate restic weekly prune job
  systemd:
    name: restic-prune.timer
    state: "{{ active |ternary('started', 'stopped') }}"
    enabled: "{{ active }}"
    daemon_reload: "{{ script_changed or service_changed or timer_changed }}"
  vars:
    day: "{{ lin_restic_cron_day_prune |default('',true) }}"
    time: "{{ lin_restic_cron_time_prune |default('',true) }}"
    active: "{{ true if day and time else false }}"

    script_changed: "{{ restic_prune_script_result is changed }}"
    service_changed: "{{ restic_prune_service_result is changed }}"
    timer_changed: "{{ restic_prune_timer_result is changed }}"
...
