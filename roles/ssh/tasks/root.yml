---
- name: derive ssh port
  set_fact:
    real_ssh_port: "{{ real_ssh_port
                     | default(ansible_port, true)
                     | default(ansible_ssh_port, true)
                     | default(22, true) }}"

- name: install openssh packages
  apt:
    name:
      - openssh-server
      - openssh-client
    state: present
  tags: lin_ssh_install


- name: open ssh port in ufw
  ufw:
    rule: allow
    port: "{{ real_ssh_port |string }}"
    proto: tcp
  no_log: "{{ hide_secrets |bool }}"
  when: lin_firewall == 'ufw'
  tags: lin_ssh_firewall

- name: open ssh port in ferm
  ivansible.base.ferm_port:
    port: "{{ real_ssh_port |string }}"
    proto: tcp
    zone: external
    ## Usually this comment is set by ferm core
    # comment: ssh
  ignore_errors: "{{ ansible_check_mode }}"
  when: lin_firewall == 'ferm'
  tags:
    - skip_ansible_lint
    - lin_ssh_firewall

- name: set connection limit on ssh port
  ivansible.base.ferm_rule:
    name: ssh-limit
    rule: |
      # SSH Connection Limit
      domain $ip_all table filter chain $INPUT
      proto tcp syn dport {{ real_ssh_port }} {{ match_limit }} DROP;
    hook: custom
    prio: 21
  ignore_errors: "{{ ansible_check_mode }}"
  vars:
    match_limit: >-
      mod hashlimit
      hashlimit-above {{ lin_ssh_conn_limit }}
      hashlimit-burst {{ lin_ssh_conn_burst }}
      hashlimit-mode srcip
      hashlimit-name ssh-conn
  when: lin_firewall == 'ferm'
        and lin_ssh_conn_limit |d('')
  tags:
    - skip_ansible_lint
    - lin_ssh_firewall


- name: enable public key authentication
  lineinfile:
    path: /etc/ssh/sshd_config
    ## This case is distinct because key casing is different on some systems
    regexp: '^#*\s*(Pub[kK]eyAuthentication)\b'
    line: 'PubkeyAuthentication yes'
    backrefs: false
    insertbefore: "^Match|^Subsystem|^# *BEGIN"
    firstmatch: true
  notify: restart ssh service
  tags: lin_ssh_settings

- name: set global sshd settings
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^(#+\s*|#*){{ item.0 }}\b'
    line: '{{ item.0 }} {{ item.1 }}'
    backrefs: false
    insertbefore: '^Match|^Subsystem|^# *BEGIN'
    firstmatch: true
  loop: "{{ lin_ssh_settings |dictsort }}"
  loop_control:
    label: "{{ item.0 }}"
  notify: restart ssh service
  tags: lin_ssh_settings

- name: set sshd settings for superuser
  blockinfile:
    path: /etc/ssh/sshd_config
    block: |
      Match User {{ superusers }}
      {% for key, val in lin_ssh_superuser_settings |dictsort if val |d('') %}
          {{ key }} {{ val }}
      {% endfor %}
    marker: "# {mark} SUPERUSER"
    insertafter: EOF
  vars:
    superusers: "{{ lin_ssh_superusers |d([],true) |join(',') }}"
  when: superusers |d('')
  notify: restart ssh service
  tags: lin_ssh_settings

- name: permit root login from certain hosts only
  blockinfile:
    path: /etc/ssh/sshd_config
    block: |
      Match Address {{ addresses }}
          PermitRootLogin yes
    marker: "# {mark} PermitRootLogin"
    insertafter: EOF
  vars:
    addresses: "{{ lin_ssh_root_login_from |d([],true) |join(',') }}"
  when: lin_ssh_root_login_from is not none
  notify: restart ssh service
  tags: lin_ssh_settings

- name: update known hosts
  import_tasks: known_hosts.yml
  tags: lin_ssh_known_hosts


- name: enable ssh service
  systemd:
    name: ssh
    state: started
    enabled: true
  tags: lin_ssh_install

- name: unlock remote user
  shell:
    cmd: |
      set -eo pipefail
      user={{ ansible_user_id }}
      unlock="$(LANG=C usermod -U "$user" 2>&1 ||:)"
      nopass=$(grep -c "should set a pass" <<< "$unlock" ||:)
      if [[ $nopass = 1 ]]; then
        echo "setpass"
        pass="$(head /dev/urandom | md5sum | cut -c-32)"
        echo "$user:$pass" | chpasswd
      fi
      usermod -U "$user"
    executable: bash
  register: _user_unlock_result
  changed_when: _user_unlock_result.stdout is search('setpass')
  tags: lin_ssh_unlock_user
...
